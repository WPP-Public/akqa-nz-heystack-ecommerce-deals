<?php
namespace Heystack\Subsystem\Deals\Test;

use Heystack\Subsystem\Deals\Condition\StartDate;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-25 at 16:49:07.
 */
class StartDateTest extends \PHPUnit_Framework_TestCase
{

    protected $timeCondition;
    protected $adaptableConfigurationStub;

    protected function setUp()
    {
        $this->adaptableConfigurationStub = $this->getMockBuilder('Heystack\Subsystem\Deals\AdaptableConfiguration')
            ->disableOriginalConstructor()
            ->getMock();
    }

    protected function configureStub($getConfigMap, $hasConfigMap)
    {
        $this->adaptableConfigurationStub->expects($this->any())
            ->method('getConfig')
            ->will(
                $this->returnValueMap($getConfigMap)
            );

        $this->adaptableConfigurationStub->expects($this->any())
            ->method('hasConfig')
            ->will(
                $this->returnValueMap($hasConfigMap)
            );

        $this->timeCondition = new StartDate($this->adaptableConfigurationStub);
    }

    public function testIncorrectConfiguration()
    {
        $this->setExpectedException('Exception');

        $this->configureStub(
            [
                [

                ]
            ],
            [
                [

                ]
            ]
        );

    }

    public function testSetCurrentTime()
    {
        $this->configureStub(
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ],
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ]
        );


        $time = date(StartDate::$time_format);
        $this->timeCondition->setCurrentTime($time);
        $this->assertAttributeNotEmpty('currentTime', $this->timeCondition);

        return $time;
    }


    /**
     * @depends testSetCurrentTime
     */
    public function testGetCurrentTime($currentTime)
    {
        $this->configureStub(
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ],
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ]
        );

        $this->assertEquals($currentTime, date(StartDate::$time_format, $this->timeCondition->getCurrentTime()));

    }

    public function testGetDescription()
    {
        $this->configureStub(
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ],
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ]
        );

        $this->assertEquals(
            $this->timeCondition->getDescription(),
            'Valid if current date greater than: ' . date(StartDate::$time_format)
        );

    }

    public function testGetType()
    {
        $this->configureStub(
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ],
            [
                [
                    'start', date(StartDate::$time_format)
                ]
            ]
        );

        $this->assertEquals($this->timeCondition->getType(), StartDate::CONDITION_TYPE);
    }

}
