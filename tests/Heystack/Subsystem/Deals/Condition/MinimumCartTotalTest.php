<?php
namespace Heystack\Subsystem\Deals\Test;

use Heystack\Subsystem\Deals\Condition\MinimumCartTotal;
use Heystack\Subsystem\Products\ProductHolder\ProductHolder;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-25 at 16:49:07.
 */
class MinimumCartTotalTest extends \PHPUnit_Framework_TestCase
{

    protected $minimumCartCondition;
    protected $adaptableConfigurationStub;
    protected $purchaseableHolder;
    protected $currencyService;

    protected function setUp()
    {
        $this->adaptableConfigurationStub = $this->getMockBuilder('Heystack\Subsystem\Deals\AdaptableConfiguration')
            ->disableOriginalConstructor()
            ->getMock();

        $this->purchaseableHolder = $this->getMockBuilder('Heystack\Subsystem\Products\ProductHolder\ProductHolder')
            ->disableOriginalConstructor()
            ->getMock();

        $this->currencyService = $this->getMockBuilder('Heystack\Subsystem\Ecommerce\Currency\CurrencyService')
            ->disableOriginalConstructor()
            ->getMock();


    }

    protected function configureStub($getConfigMap, $hasConfigMap)
    {
        $this->adaptableConfigurationStub->expects($this->any())
            ->method('getConfig')
            ->will(
                $this->returnValueMap($getConfigMap)
            );

        $this->adaptableConfigurationStub->expects($this->any())
            ->method('hasConfig')
            ->will(
                $this->returnValueMap($hasConfigMap)
            );

        $this->minimumCartCondition = new MinimumCartTotal($this->purchaseableHolder, $this->currencyService, $this->adaptableConfigurationStub);
    }

    public function testNoConfiguration()
    {
        $this->setExpectedException('Exception');

        $this->configureStub(
            [
                [

                ]
            ],
            [
                [

                ]
            ]
        );
    }

    public function testConfiguration()
    {
        $this->configureStub(
            [
                [
                    MinimumCartTotal::AMOUNTS_KEY, array("NZ" => 10)
                ]
            ],
            [
                [
                    MinimumCartTotal::AMOUNTS_KEY, array("NZ" => 10)
                ]
            ]
        );
    }


    public function testGetType()
    {
        $this->configureStub(
            [
                [
                    MinimumCartTotal::AMOUNTS_KEY, array("NZ" => 10)
                ]
            ],
            [
                [
                    MinimumCartTotal::AMOUNTS_KEY, array("NZ" => 10)
                ]
            ]
        );

        $this->assertEquals($this->minimumCartCondition->getType(), MinimumCartTotal::CONDITION_TYPE);
    }

    public function testGetDescription()
    {
        $this->configureStub(
            [
                [
                    MinimumCartTotal::AMOUNTS_KEY, array("NZ" => 10)
                ]
            ],
            [
                [
                    MinimumCartTotal::AMOUNTS_KEY, array("NZ" => 10)
                ]
            ]
        );

        $this->minimumCartCondition->setAmounts(array("NZ" => 10));

        $this->assertEquals($this->minimumCartCondition->getAmounts(), array("NZ" => 10));

        $this->assertEquals($this->minimumCartCondition->getDescription(), "The Transaction sub total must be greater than or equal to -  NZ : 10");


    }

    public function testMet()
    {


        $this->markTestIncomplete();
    }

    public function testAlmostMet()
    {


        $this->markTestIncomplete();
    }

}
