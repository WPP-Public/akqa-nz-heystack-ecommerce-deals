<?php
namespace Heystack\Subsystem\Deals\Test;

use Heystack\Subsystem\Deals\Condition\Purchasable;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-25 at 16:49:05.
 */
class PurchasableTest extends \PHPUnit_Framework_TestCase
{
    const PRIMARY_IDENTIFIER = 'Identifier123';

    /**
     * @var Purchasable
     */
    protected $purchasableCondition;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $adaptableConfigurationStub = $this->getMockBuilder('Heystack\Subsystem\Deals\AdaptableConfiguration')
            ->disableOriginalConstructor()
            ->getMock();

        $adaptableConfigurationStub->expects($this->any())
            ->method('getConfig')
            ->will(
                $this->returnValueMap(
                    [
                        ['purchasable_identifier', self::PRIMARY_IDENTIFIER]
                    ]
                )
            );

        $adaptableConfigurationStub->expects($this->any())
            ->method('hasConfig')
            ->will(
                $this->returnValueMap(
                    [
                        ['purchasable_identifier', true]
                    ]
                )
            );

        $purchasableHolderStub = $this->getMockBuilder('Heystack\Subsystem\Ecommerce\Purchasable\Interfaces\PurchasableHolderInterface')
            ->disableOriginalConstructor()
            ->getMock();

        $purchasableHolderStub->expects($this->any())
            ->method('getPurchasablesByPrimaryIdentifier')
            ->will(
                $this->returnValue(['purchasable_standin'])
            );

        $this->purchasableCondition = new Purchasable($purchasableHolderStub, $adaptableConfigurationStub);
    }

    /**
     * @covers Heystack\Subsystem\Deals\Condition\Purchasable::met
     */
    public function testMet()
    {
        $this->assertTrue($this->purchasableCondition->met());

        $this->assertTrue($this->purchasableCondition->met(['PurchasableIdentifier' => self::PRIMARY_IDENTIFIER]));

        $this->assertFalse($this->purchasableCondition->met(['PurchasableIdentifier' => 'Incorrect Identifier']));
    }

    /**
     * @covers Heystack\Subsystem\Deals\Condition\Purchasable::getDescription
     */
    public function testGetDescription()
    {
        $this->assertEquals(
            $this->purchasableCondition->getDescription(),
            'Must have Purchasable: ' . self::PRIMARY_IDENTIFIER
        );
    }

    /**
     * @covers Heystack\Subsystem\Deals\Condition\Purchasable::getPurchasableIdentifier
     */
    public function testGetPurchasableIdentifier()
    {
        $this->assertInstanceOf('Heystack\Subsystem\Core\Identifier\Identifier', $id = $this->purchasableCondition->getPurchasableIdentifier());
        $this->assertEquals(self::PRIMARY_IDENTIFIER, $id->getPrimary());
    }
}
