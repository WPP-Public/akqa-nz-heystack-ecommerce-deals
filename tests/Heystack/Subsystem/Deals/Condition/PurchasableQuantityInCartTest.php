<?php
namespace Heystack\Subsystem\Deals\Test;

use Heystack\Subsystem\Deals\Condition\PurchasableHasQuantityInCart;
use Heystack\Subsystem\Products\ProductHolder\ProductHolder;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-25 at 16:49:07.
 */
class PurchasableQuantityInCartTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Time
     */
    protected $purchasableQuantityInCartCondition;
    protected $adaptableConfigurationStub;
    protected $purchaseableHolder;
    protected $purchasable;

    protected function setUp()
    {
        $this->adaptableConfigurationStub = $this->getMockBuilder('Heystack\Subsystem\Deals\AdaptableConfiguration')
            ->disableOriginalConstructor()
            ->getMock();

        $this->purchaseableHolder = $this->getMockBuilder('Heystack\Subsystem\Products\ProductHolder\ProductHolder')
            ->disableOriginalConstructor()
            ->getMock();

        $this->purchasable = $this->getMockBuilder('Heystack\Subsystem\Ecommerce\Purchasable\Interfaces\PurchasableInterface')
            ->getMock();

    }

    protected function configureStub($getConfigMap, $hasConfigMap)
    {
        $this->adaptableConfigurationStub->expects($this->any())
            ->method('getConfig')
            ->will(
                $this->returnValueMap($getConfigMap)
            );

        $this->adaptableConfigurationStub->expects($this->any())
            ->method('hasConfig')
            ->will(
                $this->returnValueMap($hasConfigMap)
            );

        $this->purchasableQuantityInCartCondition = new PurchasableHasQuantityInCart($this->purchaseableHolder, $this->adaptableConfigurationStub);
    }

    public function testNoConfiguration()
    {
        $this->setExpectedException('Exception');

        $this->configureStub(
            [
                [

                ]
            ],
            [
                [

                ]
            ]
        );
    }

    public function testConfiguration()
    {
        $this->configureStub(
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ],
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ],
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ],
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ]
        );
    }

    public function testNoPurchasableIdentifiersConfiguration()
    {
        $this->setExpectedException('Exception');

        $this->configureStub(
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ]
            ],
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ]
            ]
        );
    }

    public function testNoMinimumQuantityConfiguration()
    {
        $this->setExpectedException('Exception');

        $this->configureStub(
            [
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ],
            [
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ]
        );
    }

    public function testGetType()
    {
        $this->configureStub(
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ],
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ],
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ],
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ]
        );

        $this->assertEquals($this->purchasableQuantityInCartCondition->getType(), PurchasableHasQuantityInCart::CONDITION_TYPE);
    }

    public function testGetDescription()
    {
        $this->configureStub(
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ],
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ],
            [
                [
                    PurchasableHasQuantityInCart::MINIMUM_QUANTITY_KEY, 1
                ],
                [
                    PurchasableHasQuantityInCart::PURCHASABLE_IDENTIFIERS, array(1)
                ]
            ]
        );

        $this->purchasableQuantityInCartCondition->setMinimumQuantity(4);
        $this->purchasableQuantityInCartCondition->setPurchasableIdentifiers(array(4));

        $this->assertEquals($this->purchasableQuantityInCartCondition->getDescription(), 'One of them items must have at least ' . $this->purchasableQuantityInCartCondition->getMinimumQuantity() . ' quantity in the cart. Items include ' . implode($this->purchasableQuantityInCartCondition->getPurchasableIdentifiers(), ','));


    }

    public function testMet()
    {


        $this->markTestIncomplete();
    }

    public function testAlmostMet()
    {


        $this->markTestIncomplete();
    }

}
