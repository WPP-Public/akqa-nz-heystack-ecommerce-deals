<?php
namespace Heystack\Subsystem\Deals\Test;

use Heystack\Subsystem\Deals\Result\FixedPrice;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-25 at 16:49:32.
 */
class FixedPriceTest extends \PHPUnit_Framework_TestCase
{
    const PRIMARY_IDENTIFIER = 'Identifier123';
    const NEW_PRICE = 35;
    const OLD_PRICE = 100;
    const EXPECTED_DISCOUNT = 65;
    const PURCHASABLE_QUANTITY = 1;

    /**
     * @var FixedPrice
     */
    protected $fixedPriceResult;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $adaptableConfigurationStub = $this->getMockBuilder('Heystack\Subsystem\Deals\AdaptableConfiguration')
            ->disableOriginalConstructor()
            ->getMock();

        $adaptableConfigurationStub->expects($this->any())
            ->method('getConfig')
            ->will(
                $this->returnValueMap(
                    [
                        ['purchasable_identifier', self::PRIMARY_IDENTIFIER],
                        ['value', self::NEW_PRICE]
                    ]
                )
            );

        $adaptableConfigurationStub->expects($this->any())
            ->method('hasConfig')
            ->will(
                $this->returnValueMap(
                    [
                        ['purchasable_identifier', true],
                        ['value', true]
                    ]
                )
            );


        $purchasableStub = $this->getMockBuilder('Heystack\Subsystem\Ecommerce\Purchasable\Interfaces\PurchasableInterface')
            ->disableOriginalConstructor()
            ->getMock();

        $purchasableStub->expects($this->any())
            ->method('getTotal')
            ->will(
                $this->returnValue(self::OLD_PRICE)
            );

        $purchasableStub->expects($this->any())
            ->method('getQuantity')
            ->will(
                $this->returnValue(self::PURCHASABLE_QUANTITY)
            );


        $purchasableHolderStub = $this->getMockBuilder('Heystack\Subsystem\Ecommerce\Purchasable\Interfaces\PurchasableHolderInterface')
            ->disableOriginalConstructor()
            ->getMock();

        $purchasableHolderStub->expects($this->any())
            ->method('getPurchasablesByPrimaryIdentifier')
            ->will(
                $this->returnValue(array($purchasableStub))
            );

        $eventDispatcherStub = $this->getMockBuilder('Symfony\Component\EventDispatcher\EventDispatcherInterface')
            ->disableOriginalConstructor()
            ->getMock();

        $this->fixedPriceResult = new FixedPrice($eventDispatcherStub, $purchasableHolderStub, $adaptableConfigurationStub);
    }

    /**
     * @covers Heystack\Subsystem\Deals\Result\FixedPrice::getDescription
     * @todo   Implement testGetDescription().
     */
    public function testGetDescription()
    {
        $this->assertEquals('New Fixed Price: ' . self::NEW_PRICE, $this->fixedPriceResult->getDescription());
    }

    /**
     * @covers Heystack\Subsystem\Deals\Result\FixedPrice::process
     * @todo   Implement testProcess().
     */
    public function testProcess()
    {
        $dealHandlerStub = $this->getMockBuilder('Heystack\Subsystem\Deals\DealHandler')
            ->disableOriginalConstructor()
            ->getMock();

        $this->assertEquals(self::EXPECTED_DISCOUNT, $this->fixedPriceResult->process($dealHandlerStub));
    }
}
